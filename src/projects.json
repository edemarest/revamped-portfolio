    [
      {
        "id": "rblxstats",
        "title": "RBLXStats (BETA)",
        "short": "Real-time Roblox game analytics with hourly sampling, retention rollups, and engagement ratings.",
          "details": "RBLXStats (also referred to as RBLXRank) is a full-stack analytics platform for Roblox developers. The system performs hourly sampling of player counts for tracked games, stores raw samples for 90 days, and compacts data into daily/weekly/monthly rollups for long-term trends. Tracking states (Tracking, Following, Archived) control sampling and quota usage. Key features: shared sampling to avoid duplicate API calls when multiple users track the same game, precomputed daily aggregates for fast dashboards, system metrics (coverage, freshness, sample count), and an engagement rating computed as (AvgPlaying / Visits in 24h) × 100%.\n\nYou can view the live site at https://rblxstats.live.\n\nAn AI agent (presented as an anime-style assistant) can analyze a game's performance and surface strengths and concerns when a 24-hour sampling window is available — it highlights retention issues, momentum shifts, and suggestions for improvements.\n\nTech highlights: React 18 + TypeScript frontend (Vite), Node.js + Express backend (TypeScript), PostgreSQL 15 with monthly partitioning for experience_metrics, node-postgres driver, background hourly sampling workers, Docker Compose deployment, and Chart.js for visualizations. Designed for efficient API usage, predictable retention, and quick API responses backed by nightly rollups.",
        "media": [
          { "type": "image", "fileSrc": "/assets/project-images/rblxstats-1.png" },
          { "type": "image", "fileSrc": "/assets/project-images/rblxstats-2.png" },
          { "type": "image", "fileSrc": "/assets/project-images/rblxstats-4.png" },
          { "type": "image", "fileSrc": "/assets/project-images/rblxstats-5.png" },
          { "type": "image", "fileSrc": "/assets/project-images/rblxstats-6.png" }
        ],
        "cover": "/assets/project-images/rblx-stats-cover.png",
        "link": "https://rblxstats.live",
        "tags": ["React", "TypeScript", "Node.js", "Express", "PostgreSQL", "Docker", "Chart.js"]
      },
      {
        "id": "pokemon-sleep-research-community",
        "title": "Pok\u00e9mon Sleep Research Community",
        "short": "A privacy-focused community for Pok\u00e9mon Sleep players. Features friend code sharing, posts, and tag-based filtering.",
        "details": "A community forum and friend code-sharing site for Pok\u00e9mon Sleep players. Built with React and Firebase, the platform offers privacy-aware code sharing, discussion posts, and a tag-based filtering system. Users can share entries, earn reputation, and connect with others while protecting their codes from spammers.\n\nChallenges: Developed secure authentication and Firestore rules for privacy-preserving features. Created a flexible, scalable data structure for posts and user activity. Implemented a dynamic masonry layout and profanity filter to maintain quality user contributions.",
        "media": [
          { "type": "image", "fileSrc": "/assets/project-images/psc.png" },
          { "type": "image", "fileSrc": "/assets/project-images/psc2.png" },
          { "type": "image", "fileSrc": "/assets/project-images/psc3.png" }
        ],
        "cover": "/assets/project-images/psc-logo.png",
        "link": "https://pokemon-sleep-research-community.com",
        "tags": ["Firebase", "React", "Node.js"]
      },
      {
        "id": "phas-evidence-tracker",
        "title": "Phasmophobia Ghost Tracker",
        "short": "A collaborative evidence tracking tool for Phasmophobia players with Discord integration and real-time sharing.",
        "details": "A real-time collaborative evidence tracker for Phasmophobia ghost hunting sessions. Teams can use the Discord Activity version to create and join investigation lobbies directly inside Discord, or play in the browser. Track discovered evidence, eliminate ghost types, and coordinate findings in real time.\n\nChallenges: Built real-time synchronization using a polling-based client. Implemented Discord Embedded App SDK integration. Designed robust session management with participant tracking, evidence state synchronization, and ghost elimination logic.",
        "media": [
          { "type": "youtube", "id": "Ia5rDEf-x7s" }
        ],
        "cover": "/assets/project-images/phas-journal-cover.gif",
        "link": "https://phas-evidence-tracker.onrender.com/",
        "tags": ["React", "Node.js", "Express", "Discord SDK"]
      },
      {
        "id": "rna-analysis-tool",
        "title": "RNA Analysis Tool",
        "short": "A bioinformatics platform for RNA sequence analysis with interactive visualization. Built with Flask and React.",
        "details": "An RNA sequence analysis platform that allows users to upload FASTA files and perform various structural and predictive analyses. Supports motif search, RNA folding stability, and splice site prediction, with results via interactive graphs and data tables. Backend uses Flask APIs with SciPy and BioPython; frontend is React and Tailwind.\n\nChallenges: Designed robust backend routes for multiple sequence types. Integrated bioinformatics libraries with performant React state handling. Planned scalability for long sequences and batch submissions.",
        "media": [
          { "type": "image", "fileSrc": "/assets/project-images/rna-tool-1.png" },
          { "type": "image", "fileSrc": "/assets/project-images/rna-tool-2.png" }
        ],
        "cover": "/assets/project-images/rna-logo.png",
        "link": "https://github.com/edemarest/rna-analysis-tool",
        "tags": ["Flask", "Python", "React", "Node.js"]
      },
      {
        "id": "power-rock-app",
        "title": "Power Rock App",
        "short": "A music-themed fitness app for fans and artists. Dual user roles, real-time updates, and rewards.",
        "details": "A music-themed fitness app connecting fans with artist-created workouts. Users select favorite genres, complete guided workouts, and earn rewards. Artists create branded exercises, and the dual user role structure supports tailored onboarding and content control.\n\nChallenges: Designed scalable logic for two user types. Handled real-time state updates during workouts. Maintained consistent UX for both fan and artist journeys.",
        "media": [
          { "type": "youtube", "id": "U-qfejJFTfM" },
          { "type": "slides", "id": "194_5LoCfFsi7GLSna5Aaqp1MH_6LsLken8RVnQssJOw" }
        ],
        "cover": "/assets/project-images/pr-logo.png",
        "link": "https://github.com/edemarest/Power-Rock-App",
        "tags": ["Swift", "Firebase"]
      },
      {
        "id": "kambaz",
        "title": "Kambaz",
        "short": "A learning management system inspired by Canvas. Course creation, user roles, and a full quiz engine.",
        "details": "Kambaz is a full-featured learning management system built from scratch as a class project modeled after Canvas. The app supports course creation, user enrollment, module tracking, and full CRUD functionality. Built a comprehensive quiz/exam engine supporting multiple question types, submission tracking, and publishing options for faculty.\n\nChallenges: Integrated quizzes into existing data model with RESTful API endpoints. Implemented permissions and views for both student and faculty workflows. Utilized Redux for state management and backend validation of user input and submission logic.",
        "media": [
          { "type": "image", "fileSrc": "/assets/project-images/kambaz_1.png" },
          { "type": "image", "fileSrc": "/assets/project-images/kambaz_2.png" }
        ],
        "cover": "/assets/project-images/kambaz-logo.png",
        "tags": ["Express", "Node.js", "MongoDB", "React"]
      },
      {
        "id": "huskyflow",
        "title": "HuskyFlow (Enhanced)",
        "short": "A Stack Overflow clone with daily puzzles, messaging, and leaderboards. Built with the MERN stack.",
        "details": "This class project reimagines a bare-bones Stack Overflow clone with major feature upgrades. Built with the MERN stack, HuskyFlow introduces user authentication, direct messaging, and daily puzzle challenges modeled after games like NYT\u2019s Sudoku and LinkedIn\u2019s logic puzzles. Contributed to system architecture for puzzle schemas, leaderboard model, and backend API design.\n\nChallenges: Designed daily puzzle schema, including CodeNumbers and TruthTable logic puzzle formats. Created secure submission logic, leaderboard tracking, and one-attempt-per-day constraints. Collaborated in a team to modularize a complex full-stack codebase while integrating new features.",
        "media": [
          { "type": "image", "fileSrc": "/assets/project-images/swe-1.png" },
          { "type": "image", "fileSrc": "/assets/project-images/swe_2.png" }
        ],
        "cover": "/assets/project-images/swe-logo.png",
        "link": "https://fake-so-client-418.onrender.com",
        "tags": ["Express", "MongoDB", "Node.js", "React"]
      },
      {
        "id": "robux-calculator",
        "title": "Robux Calculator",
        "short": "A tool for Roblox developers to calculate earnings and fees. Also available as a Discord bot.",
        "details": "This tool helps developers calculate Robux earnings, DevEx values, and marketplace fees. Converts between Robux and local currencies, applying taxes and discounts. Available both as a Lua app on Roblox and as a Discord bot with /money2robux and /robux2money commands, supporting customizable currency arguments and the same calculation logic.\n\nChallenges: Implemented non-linear pricing logic with dynamic tax inputs. Designed currency scaling and display formatting for clarity. Integrated play tester feedback to add optional tax removal tools. Developed Discord bot version in JavaScript using Discord SDK for seamless integration.",
        "media": [
          { "type": "youtube", "id": "BUmp30WhXAQ" }
        ],
        "cover": "/assets/project-images/robux-logo.png",
        "link": "https://www.roblox.com/games/13685362163/Robux-Computer",
        "tags": ["Lua", "JavaScript", "Discord SDK"]
      },
      {
        "id": "bloxle",
        "title": "Bloxle",
        "short": "An endless Wordle-style game built in Roblox Studio. Real-time validation and custom UI.",
        "details": "A never-ending Wordle-style game made in Roblox Studio. Bloxle features a custom wooden UI, row-based guessing logic, and an API for real-time word validation. Designed for endless play without the 1-word-a-day limit.\n\nChallenges: Built dynamic UI elements and validated API guesses in real-time. Matched Wordle\u2019s interaction flow using row constraints and error messages. Styled UI with a custom wood-grain look for unique branding.",
        "media": [
          { "type": "youtube", "id": "_1k-i0bezEs?si=IE99k5FS36lRjFY3" }
        ],
        "cover": "/assets/project-images/bloxle.png",
        "link": "https://www.youtube.com/watch?v=_1k-i0bezEs",
        "tags": ["Lua"]
      },
      {
        "id": "flood-minigame",
        "title": "Flood Minigame",
        "short": "A Lua-based puzzle game to fill the board with one color. Dynamic difficulty and leaderboards.",
        "details": "Flood is a Lua-based puzzle game where players aim to match the entire board to one color in limited turns. The board grows in complexity and has customizable difficulty. Built with a color fill algorithm and real-time leaderboards.\n\nChallenges: Created efficient flood-fill logic and prevented infinite loops. Balanced board generation with dynamic difficulty scaling. Built backend leaderboard functionality using Roblox datastores.",
        "media": [
          { "type": "youtube", "id": "NrAPQCIUMqU" }
        ],
        "cover": "/assets/project-images/flood.png",
        "link": "https://www.roblox.com/games/12921382755/FLOOD-Beta",
        "tags": ["Lua"]
      },
      {
        "id": "maze-game",
        "title": "Maze Game",
        "short": "A maze-generation and solving game using Prim's algorithm. BFS/DFS visualization and interactive controls.",
        "details": "A pathfinding and maze-generation game using Prim\u2019s algorithm and interactive controls. Users can navigate mazes using keyboard input and view optimal solutions through BFS and DFS toggles. Designed as a tool to visualize algorithm tradeoffs.\n\nChallenges: Implemented Prim\u2019s algorithm for maze generation. Integrated animation states for search algorithms in real-time. Balanced visual clarity with technical depth for educational value.",
        "media": [
          { "type": "image", "fileSrc": "/assets/project-images/maze.png" }
        ],
        "cover": "/assets/project-images/maze.png",
        "tags": ["Java"]
      }
    ]
